import Label from "components/Label/Label";
import React, { FC, useState, useEffect, useRef } from "react";
import Avatar from "shared/Avatar/Avatar";
import ButtonPrimary from "shared/Button/ButtonPrimary";
import Input from "shared/Input/Input";
import Select from "shared/Select/Select";
import Textarea from "shared/Textarea/Textarea";
import CommonLayout from "./CommonLayout";
import { Helmet } from "react-helmet";
import { useAuth } from "contexts/AuthContext";
import { authAPI } from "api/auth";
import { adminAPI } from "api/admin";
import { uploadAPI } from "api/upload";

export interface AccountPageProps {
  className?: string;
  noLayout?: boolean; // Skip CommonLayout for embedded use
}

const AccountPage: FC<AccountPageProps> = ({ className = "", noLayout = false }) => {
  const { user, updateUser, isAdmin } = useAuth();
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    phone: "",
    gender: "",
    dateOfBirth: "",
    address: "",
    about: "",
  });
  const [loading, setLoading] = useState(false);
  const [uploadingImage, setUploadingImage] = useState(false);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Update imagePreview when user changes
  useEffect(() => {
    if (user?.imageUrl && user.imageUrl.trim() !== "") {
      console.log("üñºÔ∏è Updating imagePreview from user context:", user.imageUrl);
      setImagePreview(user.imageUrl);
    }
  }, [user?.imageUrl]);

  // Load user data when component mounts
  useEffect(() => {
    // Ki·ªÉm tra token tr∆∞·ªõc khi g·ªçi API
    const token = localStorage.getItem("token");
    if (!token) {
      console.error("‚ùå No token found, cannot load user data");
      setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin");
      return;
    }
    
    const loadUserData = async () => {
      try {
        console.log("üîë Token exists, calling getMe API...");
        const userProfile = await authAPI.getMe();
        console.log("üì• Full user profile from API:", userProfile);
        console.log("üì• imageUrl value:", userProfile.imageUrl);
        console.log("üì• imageUrl type:", typeof userProfile.imageUrl);
        console.log("üì• imageUrl length:", userProfile.imageUrl?.length);
        
        setFormData({
          fullName: userProfile.fullName || "",
          email: userProfile.email || "",
          phone: userProfile.phone || "",
          gender: userProfile.gender || "",
          dateOfBirth: userProfile.dateOfBirth || "",
          address: userProfile.address || "",
          about: "",
        });
        updateUser(userProfile);
        
        // C·∫≠p nh·∫≠t preview n·∫øu c√≥ imageUrl t·ª´ server
        // Ki·ªÉm tra c·∫£ imageUrl v√† ImageUrl (case insensitive)
        const imageUrl = userProfile.imageUrl || (userProfile as any).ImageUrl;
        if (imageUrl && typeof imageUrl === "string" && imageUrl.trim() !== "") {
          console.log("‚úÖ Setting imagePreview from API:", imageUrl);
          setImagePreview(imageUrl);
        } else {
          console.log("‚ö†Ô∏è No valid imageUrl in user profile. Available fields:", Object.keys(userProfile));
          setImagePreview(null);
        }
      } catch (error: any) {
        console.error("Failed to load user data:", error);
        
        // X·ª≠ l√Ω l·ªói 401 - Unauthorized
        if (error.response?.status === 401) {
          console.error("‚ùå 401 Unauthorized - Token expired or invalid");
          setError("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
          // Axios interceptor s·∫Ω t·ª± ƒë·ªông redirect v·ªÅ login
        } else {
          let errorMessage = "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng";
          
          if (error.networkError || error.noResponse) {
            errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng.";
          } else if (error.response?.data?.message) {
            errorMessage = error.response.data.message;
          } else if (error.message) {
            errorMessage = error.message;
          }
          
          setError(errorMessage);
        }
      }
    };

    loadUserData();
  }, []);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith("image/")) {
      setError("Vui l√≤ng ch·ªçn file ·∫£nh h·ª£p l·ªá");
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      setError("K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB");
      return;
    }

    // T·∫°o preview ·∫£nh ngay khi ch·ªçn file
    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result as string);
    };
    reader.readAsDataURL(file);

    setUploadingImage(true);
    setError("");
    setMessage("");

    try {
      console.log("üì§ Starting image upload...", file.name, file.size, file.type);
      const response = await uploadAPI.uploadUserImage(file);
      console.log("‚úÖ Upload response:", response);
      
      if (!response || !response.imageUrl) {
        throw new Error("Invalid response from server");
      }
      
      // C·∫≠p nh·∫≠t preview v·ªõi URL m·ªõi t·ª´ server
      setImagePreview(response.imageUrl);
      
      // Refresh user data to get updated imageUrl
      const userProfile = await authAPI.getMe();
      console.log("‚úÖ User profile updated with imageUrl:", userProfile.imageUrl);
      
      // C·∫≠p nh·∫≠t AuthContext ƒë·ªÉ Header v√† c√°c component kh√°c hi·ªÉn th·ªã ·∫£nh m·ªõi
      updateUser(userProfile);
      
      setMessage("C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!");
      
      // Reset file input
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    } catch (error: any) {
      console.error("‚ùå Upload error:", error);
      console.error("‚ùå Error details:", {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        statusText: error.response?.statusText,
        networkError: error.networkError,
        code: error.code,
      });
      
      let errorMessage = "Kh√¥ng th·ªÉ upload ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!";
      
      if (error.networkError || error.noResponse) {
        errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng ho·∫∑c ƒë·∫£m b·∫£o backend ƒëang ch·∫°y.";
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.response?.status === 401) {
        errorMessage = "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
      } else if (error.response?.status === 413) {
        errorMessage = "File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n.";
      } else if (error.response?.status === 400) {
        errorMessage = "File kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn file ·∫£nh kh√°c.";
      } else if (error.code === "ECONNREFUSED") {
        errorMessage = "K·∫øt n·ªëi b·ªã t·ª´ ch·ªëi. Vui l√≤ng ki·ªÉm tra xem backend server c√≥ ƒëang ch·∫°y kh√¥ng.";
      } else if (error.code === "ERR_NETWORK") {
        errorMessage = "L·ªói m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      setError(errorMessage);
      // X√≥a preview n·∫øu upload th·∫•t b·∫°i
      setImagePreview(null);
    } finally {
      setUploadingImage(false);
    }
  };

  const handleUpdate = async () => {
    setLoading(true);
    setError("");
    setMessage("");

    // Validate required fields
    if (!formData.fullName || formData.fullName.trim() === "") {
      setError("Vui l√≤ng nh·∫≠p h·ªç t√™n");
      setLoading(false);
      return;
    }
    
    if (!formData.email || formData.email.trim() === "") {
      setError("Vui l√≤ng nh·∫≠p email");
      setLoading(false);
      return;
    }
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email.trim())) {
      setError("Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");
      setLoading(false);
      return;
    }

    try {
      if (isAdmin && user?.userId) {
        // ƒê·∫£m b·∫£o email c√≥ gi√° tr·ªã (l·∫•y t·ª´ formData ho·∫∑c user context)
        const emailToSend = formData.email?.trim() || user?.email || "";
        
        if (!emailToSend) {
          setError("Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
          setLoading(false);
          return;
        }
        
        // Chu·∫©n b·ªã data ƒë·ªÉ g·ª≠i
        // KH√îNG g·ª≠i roleName v√¨ role kh√¥ng ƒë∆∞·ª£c thay ƒë·ªïi khi update profile
        // Role ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã, kh√¥ng c·∫ßn validate trong update
        const updateData: any = {
          fullName: formData.fullName.trim(),
          email: emailToSend, // Email l√† required field
        };
        
        // Ch·ªâ th√™m c√°c fields c√≥ gi√° tr·ªã (tr·ª´ empty strings)
        if (formData.phone && formData.phone.trim()) {
          updateData.phone = formData.phone.trim();
        }
        if (formData.gender && formData.gender.trim()) {
          updateData.gender = formData.gender.trim();
        }
        if (formData.dateOfBirth && formData.dateOfBirth.trim()) {
          // Format date ƒë·ªÉ backend nh·∫≠n ƒë∆∞·ª£c (YYYY-MM-DD)
          updateData.dateOfBirth = formData.dateOfBirth.trim();
        }
        if (formData.address && formData.address.trim()) {
          updateData.address = formData.address.trim();
        }

        console.log("üì§ Updating user with data:", updateData);
        console.log("üì§ User ID:", user.userId);
        
        // N·∫øu l√† Admin, d√πng admin API
        await adminAPI.updateUser(user.userId, updateData);
      } else {
        // User th∆∞·ªùng th√¨ c√≥ th·ªÉ d√πng API kh√°c n·∫øu c√≥
        setMessage("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
      }

      // Refresh user data
      const userProfile = await authAPI.getMe();
      updateUser(userProfile);
      setMessage("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
    } catch (error: any) {
      console.error("‚ùå Update error:", error);
      console.error("‚ùå Error details:", {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message,
      });
      
      let errorMessage = "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin!";
      
      // X·ª≠ l√Ω validation errors t·ª´ backend
      if (error.response?.status === 400) {
        const errorData = error.response?.data;
        
        // Backend c√≥ th·ªÉ tr·∫£ v·ªÅ:
        // 1. String message tr·ª±c ti·∫øp: "Error message"
        // 2. Object v·ªõi message property: { message: "Error message" }
        // 3. Object v·ªõi errors property (ModelState): { errors: { field: ["error1", "error2"] } }
        
        if (typeof errorData === "string") {
          // Backend tr·∫£ v·ªÅ string message tr·ª±c ti·∫øp (BadRequest(result.Message))
          errorMessage = errorData;
        } else if (errorData?.errors) {
          // Backend tr·∫£ v·ªÅ ModelState errors (object v·ªõi keys l√† field names)
          const validationErrors = Object.entries(errorData.errors)
            .map(([field, messages]: [string, any]) => {
              const fieldName = field.charAt(0).toUpperCase() + field.slice(1);
              const errorList = Array.isArray(messages) ? messages.join(", ") : messages;
              return `${fieldName}: ${errorList}`;
            })
            .join("\n");
          errorMessage = `L·ªói validation:\n${validationErrors}`;
        } else if (errorData?.message) {
          errorMessage = errorData.message;
        } else {
          errorMessage = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tr∆∞·ªùng th√¥ng tin.";
        }
      } else if (error.response?.status === 401 || error.response?.status === 403) {
        errorMessage = "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
      } else if (error.response?.status === 404) {
        errorMessage = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.";
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const content = (
    <div className="space-y-6 sm:space-y-8">
      {/* HEADING */}
      {!noLayout && <h2 className="text-3xl font-semibold">Account infomation</h2>}
      {!noLayout && <div className="w-14 border-b border-neutral-200 dark:border-neutral-700"></div>}
          <div className="flex flex-col md:flex-row">
            <div className="flex-shrink-0 flex items-start">
              <div className="relative rounded-full overflow-hidden flex">
                {(() => {
                  const avatarUrl = imagePreview || user?.imageUrl;
                  console.log("üñºÔ∏è Avatar rendering with:", {
                    imagePreview,
                    userImageUrl: user?.imageUrl,
                    finalUrl: avatarUrl,
                    userFullName: user?.fullName
                  });
                  return (
                    <Avatar 
                      sizeClass="w-32 h-32" 
                      imgUrl={avatarUrl || undefined}
                      userName={user?.fullName}
                    />
                  );
                })()}
                <div 
                  className={`absolute inset-0 bg-black bg-opacity-60 flex flex-col items-center justify-center text-neutral-50 cursor-pointer transition-opacity ${
                    uploadingImage ? "opacity-80" : "hover:bg-opacity-70"
                  }`}
                >
                  {uploadingImage ? (
                    <div className="flex flex-col items-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white mb-2"></div>
                      <span className="text-xs">ƒêang upload...</span>
                    </div>
                  ) : (
                    <>
                      <svg
                        width="30"
                        height="30"
                        viewBox="0 0 30 30"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M17.5 5H7.5C6.83696 5 6.20107 5.26339 5.73223 5.73223C5.26339 6.20107 5 6.83696 5 7.5V20M5 20V22.5C5 23.163 5.26339 23.7989 5.73223 24.2678C6.20107 24.7366 6.83696 25 7.5 25H22.5C23.163 25 23.7989 24.7366 24.2678 24.2678C24.7366 23.7989 25 23.163 25 22.5V17.5M5 20L10.7325 14.2675C11.2013 13.7988 11.8371 13.5355 12.5 13.5355C13.1629 13.5355 13.7987 13.7988 14.2675 14.2675L17.5 17.5M25 12.5V17.5M25 17.5L23.0175 15.5175C22.5487 15.0488 21.9129 14.7855 21.25 14.7855C20.5871 14.7855 19.9513 15.0488 19.4825 15.5175L17.5 17.5M17.5 17.5L20 20M22.5 5H27.5M25 2.5V7.5M17.5 10H17.5125"
                          stroke="currentColor"
                          strokeWidth={1.5}
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                      <span className="mt-1 text-xs">Change Image</span>
                    </>
                  )}
                </div>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="absolute inset-0 opacity-0 cursor-pointer z-10"
                  disabled={uploadingImage}
                />
              </div>
            </div>
            <div className="flex-grow mt-10 md:mt-0 md:pl-16 max-w-3xl space-y-6">
              <div>
                <Label>H·ªç t√™n</Label>
                <Input
                  className="mt-1.5"
                  name="fullName"
                  value={formData.fullName}
                  onChange={handleChange}
                />
              </div>
              {/* ---- */}
              <div>
                <Label>Gi·ªõi t√≠nh</Label>
                <Select
                  className="mt-1.5"
                  name="gender"
                  value={formData.gender}
                  onChange={handleChange}
                >
                  <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                  <option value="Male">Nam</option>
                  <option value="Female">N·ªØ</option>
                  <option value="Other">Kh√°c</option>
                </Select>
              </div>
              {/* ---- */}
              <div>
                <Label>Email</Label>
                <Input
                  className="mt-1.5"
                  type="email"
                  name="email"
                  value={formData.email}
                  disabled
                />
              </div>
              {/* ---- */}
              <div>
                <Label>Role</Label>
                <Input
                  className="mt-1.5"
                  value={user?.roleName || ""}
                  disabled
                />
              </div>
              {/* ---- */}
              <div className="max-w-lg">
                <Label>Ng√†y sinh</Label>
                <Input
                  className="mt-1.5"
                  type="date"
                  name="dateOfBirth"
                  value={formData.dateOfBirth}
                  onChange={handleChange}
                />
              </div>
              {/* ---- */}
              <div>
                <Label>ƒê·ªãa ch·ªâ</Label>
                <Input
                  className="mt-1.5"
                  name="address"
                  value={formData.address}
                  onChange={handleChange}
                  placeholder="Hanoi, Vietnam"
                />
              </div>
              {/* ---- */}
              <div>
                <Label>S·ªë ƒëi·ªán tho·∫°i</Label>
                <Input
                  className="mt-1.5"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  placeholder="0123456789"
                />
              </div>
              {/* ---- */}
              <div>
                <Label>Gi·ªõi thi·ªáu</Label>
                <Textarea
                  className="mt-1.5"
                  name="about"
                  value={formData.about}
                  onChange={handleTextareaChange}
                  placeholder="Gi·ªõi thi·ªáu v·ªÅ b·∫°n..."
                />
              </div>

              {/* Message */}
              {message && (
                <div className="p-4 bg-green-100 text-green-800 rounded-lg text-sm">
                  {message}
                </div>
              )}
              {error && (
                <div className="p-4 bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-200 rounded-lg text-sm whitespace-pre-line">
                  {error}
                </div>
              )}

              <div className="pt-2">
                <ButtonPrimary onClick={handleUpdate} disabled={loading}>
                  {loading ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t th√¥ng tin"}
                </ButtonPrimary>
              </div>
            </div>
          </div>
    </div>
  );

  if (noLayout) {
    return (
      <div className={`nc-AccountPage ${className}`} data-nc-id="AccountPage">
        {content}
      </div>
    );
  }

  return (
    <div className={`nc-AccountPage ${className}`} data-nc-id="AccountPage">
      <Helmet>
        <title>Account || Booking React Template</title>
      </Helmet>
      <CommonLayout>
        {content}
      </CommonLayout>
    </div>
  );
};

export default AccountPage;
